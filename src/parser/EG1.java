/* Generated By:JavaCC: Do not edit this line. EG1.java */
package parser;
import java.util.List;
import java.util.LinkedList;
import composant.$Composant.niveau;
import composant.generateur.$Generateur;
import composant.transformateur.$Transformateur;
import composant.recepteur.$Recepteur;
import composant.generateur.*;
import composant.transformateur.*;
import composant.recepteur.*;
import composant.*;
import circuit.composite.*;
import circuit.*;
import circuit.Ferme;
import circuit.composite.Composite;

public class EG1 implements EG1Constants {
private static $Composant which_composant(String name, int num, String infC,List<Composite> lCF){
  Composite c;
  switch (name){
        case "Itr" : return ($Composant) new Itr(name,num,infC);
        case "Vcc" : return ($Composant) new Vcc(name,num);
        case "Gnd" : return ($Composant) new Ground(name,num);
        case "Led" : return ($Composant) new Led(name,num);
        case "Et" : return ($Composant) new Et(name,num);
        case "Non" : return ($Composant) new Non(name,num);
        case "Ou" : return ($Composant) new Ou(name,num);
        case "Oux" : return ($Composant) new Oux(name,num);
        default:
        for(int i=0;i<lCF.size();i++)
                {
                  if(lCF.get(i).getNom().equals(name))
                  {
                    c =lCF.get(i);
                    c.setNum(num);
                    return (($Composant) c) ;
                  }
                }
                return null;
}
}

  public static void main(String args []) throws ParseException
  {
    EG1 parser = new EG1(System.in);
    System.out.println("Entrer un circuit :" );
    Ferme circuit = DEF_CIRCUIT();
    circuit.connectAllFromList();
    circuit.execute();
    System.out.println(circuit.toString2());
  }

  final public static Ferme CIRCUIT(Ferme res,List<Composite> lCF) throws ParseException {
        Token numt, numSt,numBt,numSBt,namt,infCT;
        int nbS = 0;
        int num, numS,numB,numSB;
        String name;
        String infC;
        $Composant comp;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 9:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      jj_consume_token(9);
      numt = jj_consume_token(NUM);
      jj_consume_token(10);
      namt = jj_consume_token(ID);
                 infC="";
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 11:
        jj_consume_token(11);
        infCT = jj_consume_token(ID);
        jj_consume_token(12);
                 infC = infCT.image;
        break;
      default:
        jj_la1[1] = jj_gen;
        ;
      }
                        num  = Integer.parseInt(numt.image); //numero du composant
                        name = namt.image; //nom du composant
                        comp = which_composant(name,num,infC,lCF);//type du composant

      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 13:
        jj_consume_token(13);
        break;
      default:
        jj_la1[2] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 14:
        jj_consume_token(14);
        numSt = jj_consume_token(NUM);
                         numS = Integer.parseInt(numSt.image);
        jj_consume_token(15);
        label_2:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case NUM:
            ;
            break;
          default:
            jj_la1[3] = jj_gen;
            break label_2;
          }
          //* pour chaque composant
                                          numBt = jj_consume_token(NUM);
          jj_consume_token(16);
          numSBt = jj_consume_token(NUM);
                                  numB = Integer.parseInt(numBt.image); //numero du composant dest
                                  numSB = Integer.parseInt(numSBt.image); //numero du port du composant dest
                                  comp.addSortie(numS-1,numB,numSB-1); //ajout de la sortie au composant

          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 17:
            jj_consume_token(17);
            break;
          default:
            jj_la1[4] = jj_gen;
            ;
          }
        }
        jj_consume_token(18);
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
                        res.addComposant(comp);//ajout du composant

    }
                 {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final public static Composite COMPOSITE(Composite res, List<Composite> lCF) throws ParseException {
        Token numt, numSt,numBt,numSBt,namt,infCT;
        int nbS = 0;
        int num, numS,numB,numSB;
        String name;
        String infC;
        $Composant comp;
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 9:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_3;
      }
      jj_consume_token(9);
      numt = jj_consume_token(NUM);
      jj_consume_token(10);
      namt = jj_consume_token(ID);
                 infC="";
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 11:
        jj_consume_token(11);
        infCT = jj_consume_token(ID);
        jj_consume_token(12);
                 infC = infCT.image;
        break;
      default:
        jj_la1[7] = jj_gen;
        ;
      }
                        num  = Integer.parseInt(numt.image); //numero du composant
                        name = namt.image; //nom du composant
                        comp = which_composant(name,num,infC,lCF);//type du composant

      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 13:
        jj_consume_token(13);
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 14:
        jj_consume_token(14);
        numSt = jj_consume_token(NUM);
                         numS = Integer.parseInt(numSt.image);
        jj_consume_token(15);
        label_4:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case NUM:
            ;
            break;
          default:
            jj_la1[9] = jj_gen;
            break label_4;
          }
          //* pour chaque composant
                                          numBt = jj_consume_token(NUM);
          jj_consume_token(16);
          numSBt = jj_consume_token(NUM);
                                  numB = Integer.parseInt(numBt.image); //numero du composant dest
                                  numSB = Integer.parseInt(numSBt.image); //numero du port du composant dest
                                  comp.addSortie(numS-1,numB,numSB-1); //ajout de la sortie au composant

          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 17:
            jj_consume_token(17);
            break;
          default:
            jj_la1[10] = jj_gen;
            ;
          }
        }
        jj_consume_token(18);
        break;
      default:
        jj_la1[11] = jj_gen;
        ;
      }
                        res.addComposant(comp);//ajout du composant

    }
    jj_consume_token(19);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 20:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_5;
      }
      jj_consume_token(20);
      jj_consume_token(16);
      numt = jj_consume_token(NUM);
      jj_consume_token(15);
      numSt = jj_consume_token(NUM);
      jj_consume_token(16);
      numSBt = jj_consume_token(NUM);
      jj_consume_token(21);
            num = Integer.parseInt(numt.image);
                numS = Integer.parseInt(numSt.image);
                numSB = Integer.parseInt(numSBt.image);
                res.addSortieInterieur(num-1, numS, numSB-1);
      jj_consume_token(22);
    }
    jj_consume_token(23);
          {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final public static Ferme DEF_CIRCUIT() throws ParseException {
  Token namet,et,st;
  String name;
  int n = 1;
  int e,s;
  Ferme circuit = new Ferme();
  Composite compo;
  List<Composite> lCF = new LinkedList<Composite>();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 24:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_6;
      }
      jj_consume_token(24);
      namet = jj_consume_token(ID);
      jj_consume_token(15);
      et = jj_consume_token(NUM);
      jj_consume_token(17);
      st = jj_consume_token(NUM);
      jj_consume_token(21);
                  name = namet.image;
                  e=Integer.parseInt(et.image);
                  s=Integer.parseInt(st.image);
                  compo = new Composite(name,n,e,s);
                  COMPOSITE(compo,lCF);
                  n++;
                  compo.connectAllFromList();
                  lCF.add(compo);
    }
    jj_consume_token(25);
    namet = jj_consume_token(ID);
                  circuit = CIRCUIT(circuit,lCF);
                  name = namet.image;
                  circuit.setNom(name);
    jj_consume_token(22);
         circuit.connectAllFromList(); {if (true) return circuit;}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public static EG1TokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public static Token token;
  /** Next token. */
  public static Token jj_nt;
  private static int jj_ntk;
  private static int jj_gen;
  final private static int[] jj_la1 = new int[14];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x200,0x800,0x2000,0x20,0x20000,0x4000,0x200,0x800,0x2000,0x20,0x20000,0x4000,0x100000,0x1000000,};
   }

  /** Constructor with InputStream. */
  public EG1(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public EG1(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new EG1TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public EG1(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new EG1TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public EG1(EG1TokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(EG1TokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  private static Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private static int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private static java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private static int[] jj_expentry;
  private static int jj_kind = -1;

  /** Generate ParseException. */
  public static ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[26];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 14; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 26; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
