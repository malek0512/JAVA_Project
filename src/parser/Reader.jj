/**
 * JavaCC template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */
options{  JDK_VERSION = "1.5";  static = true;}PARSER_BEGIN(EG1)package parser;
import composant.$Composant.niveau;
import composant.generateur.$Generateur;
import composant.transformateur.$Transformateur;
import composant.recepteur.$Recepteur;
import composant.generateur.*;
import composant.transformateur.*;
import composant.recepteur.*;
import composant.*;
import circuit.composite.*;
import circuit.*;
import circuit.Ferme;
import circuit.composite.Composite;

public class EG1{
private static $Composant which_composant(String name, int num){
  switch (name){
 	case "Itr" : return ($Composant) new Itr(name,num,niveau.Bas); 
 	case "Vcc" : return ($Composant) new Vcc(name,num); 
 	case "Gnd" : return ($Composant) new Ground(name,num); 
 	case "Led" : return ($Composant) new Led(name,num); 
 	case "Et" : return ($Composant) new Et(name,num); 
 	case "Non" : return ($Composant) new Non(name,num); 
 	case "Ou" : return ($Composant) new Ou(name,num); 
 	case "Oux" : return ($Composant) new Oux(name,num); 
 	default:
 		return null; //Ca serait un composite definit avant
	}
}  public static void main(String args []) throws ParseException  {    EG1 parser = new EG1(System.in);
    System.out.println("Entrer un circuit :" );
    Ferme circuit = DEF_CIRCUIT();    System.out.println(circuit.toString2());  }}PARSER_END(EG1)SKIP :{  " "| "\r"| "\t"| "\n"}

//Attention comme en caml, le match des token se fait dans de maniere sequentielle
//Ne mettre aucun apres ID
//TOKEN ://{ < CIRCUIT: "circuit" >//| < COMPOSITE: "composite" >//| < PVIRGULE: ";" >//| < VIRGULE: "," >//| < PAR_OU: "(" >//| < PAR_FER: ")" >//| < CRO_OU: "[" >//| < CRO_FER: "]" >//| < DIESE: "#" >//| < DASH: "-" >//| < ARROW_RIGHT: ">" >//| < ARROW_LEFT: "<" >////}
TOKEN : /* OPERATORS */{  < NUM: ( <DIGIT> )+ >
| < ID: <LETTER> (<DIGIT> | <LETTER>)+ >
| < #LETTER: ["a"-"z","A"-"Z"] >
| < #DIGIT: ["0" - "9"] > }Ferme CIRCUIT(Ferme res) : {	Token numt, numSt,numBt,numSBt,namt;	int nbS = 0;	int num, numS,numB,numSB;	String name;	$Composant comp;}{	(		"<" numt=<NUM> 		"|" namt=<ID>
		{			num  = Integer.parseInt(numt.image); //numero du composant
			name = namt.image; //nom du composant
			comp = which_composant(name,num);//type du composant
		}		(//pas de sortie		    ">"			{res.addComposant(comp);}		)?							//au moins une sortie		(//*
			"->#"			numSt=<NUM>
			{numS = Integer.parseInt(numSt.image);}//numero de sorti			"("			(//* pour chaque composant				numBt=<NUM> "#" numSBt=<NUM>
				{
				  numB = Integer.parseInt(numBt.image); //numero du composant dest				  numSB = Integer.parseInt(numSBt.image); //numero du port du composant dest				  comp.addSortie(numS-1,numB-1,numSB-1); //ajout de la sortie au composant						}				(",")?			)*			")>"
			{			  res.addComposant(comp);//ajout du composant			}		)?	)*
	//fini de lire la liste des composant du circuit	{return res;}}
/*
Composite COMPOSITE(List<Composite> lCF) : //lCF = liste composite final
{
	Token numt, numSt,numBt,numSBt,namt;
	int nbS = 0;
	int num, numS,numB,numSB; //num : numero du composant, numS : numero de sortie du composant, meme prefixe avec B : composant cible
	String name;
	Composite res;
	$Composant comp;
}
{
(
		"<" numt=<NUM> //numero composant token
		"|" namt=<ID> //nom du composant token
		{//ajout du composant a la liste des composant
		num  = Integer.parseInt(numt.image);
		name = namt.image;
		}
		//test si pas de sortie
		(
		    ">"
			{comp = new Led(name,num);//maj dans la liste
			res.addComposant(comp,num);
			}
			//Pas de donne a metre dans lCD
			//Ici il n'existe qu'un seul type de recepteur, sinon nous aurons qu'a faire un switch nam 
		)?
		
		//au moins une sortie
		(//*
			{
			comp = which_composant(name,num,LCF);
			res.addComposant(comp,num);//ajoute le composant a l'emplacement d'index num, composant encore inconnue
			}
			"->#"
			numSt=<NUM> //numero de sortie
			{numS = Integer.parseInt(numSt.image);}//maj du numero de sortie
			"("
			(//* pour chaque composant
				numBt=<NUM> "#" numSBt=<NUM> // numero du composant ; numero de sortie
				
				{
				  numB = Integer.parseInt(numBt.image);
				  numSB = Integer.parseInt(numSBt.image);
				  comp.addSortie(numS,numB,numSB);
				}
				(",")?
			)*
			")>"
		
		)*
)*

{lCF.add(res);}
}	
*/

Ferme DEF_CIRCUIT() : 
{ Token namet;
  String name; 
  Ferme circuit = new Ferme();
  Composite compo;
} 
{
//  	//Ajout√© par malek ://	(//		"composite" //		namet=<ID> //		//		{//		  //compo = COMPOSITE(); A faire//		  name = namet.image;//		  circuit.setNom(name);////		}//	)?

	//Alex
	(
		"circuit " 
		namet=<ID> 
		{
		  circuit = CIRCUIT(circuit); //Je pense qu'on le lui passera en parametre, sinon on redescent les ligne cu-dessus, en dessous
		  name = namet.image;
		  circuit.setNom(name);

		}
	)?
		";" //Ajouter pour qu'il reconnaisse que c'est la fin du circuit
	
	{return circuit;}
}
